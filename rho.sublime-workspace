{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ee",
				"error_node"
			],
			[
				"consu",
				"consume_token"
			],
			[
				"import",
				"import_set"
			],
			[
				"form",
				"format_error_str"
			],
			[
				"sour",
				"source_mgr"
			],
			[
				"c",
				"c"
			],
			[
				"m",
				"m_source"
			],
			[
				"line",
				"line_start"
			],
			[
				"m_",
				"m_source"
			],
			[
				"i",
				"inc\t#include \"…\""
			],
			[
				"file",
				"file_loc"
			],
			[
				"at",
				"atom_table"
			],
			[
				"clas",
				"class_\tclass"
			],
			[
				"As",
				"Ast_Flags"
			],
			[
				"A",
				"Ast_Type"
			],
			[
				"ast_",
				"ast_utils"
			],
			[
				"AST_N",
				"AST_NODE_TYPE"
			],
			[
				"in",
				"inc\t#include \"…\""
			],
			[
				"st",
				"struct_\tstruct"
			],
			[
				"cl",
				"class\tclass-..-(class)"
			],
			[
				"Sc",
				"scope_kind"
			],
			[
				"u",
				"unexpected_token"
			],
			[
				"Error",
				"ErrorHandling"
			],
			[
				"pars",
				"parse_decl"
			],
			[
				"cons",
				"consume_token"
			],
			[
				"prn",
				"print_current"
			],
			[
				"print",
				"print_current"
			],
			[
				"cur",
				"curr_token"
			],
			[
				"con",
				"consume_token"
			],
			[
				"cou",
				"consume_token"
			],
			[
				"com",
				"comment"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"parser.h\"\n#include <iostream>\nusing namespace std;\n\n\nusing namespace ast;\nusing namespace parser_utils;\nusing namespace ast::type_engine;\n\n// block of constructor and helper functions\nnamespace parser {\n\n    Parser_State::Parser_State(scanner::Scanner* _scanner): \n        m_stream(_scanner) {}\n\n    void Parser_State::reset(scanner::Scanner* _scanner) {\n        m_stream.reset(_scanner);\n    }\n\n    void Parser_State::consume() {\n        if(m_stream.valid()) {\n            m_token = m_stream.next();\n            m_next = m_stream.peak();\n        }\n        else \n            m_token.m_token = TKN_EMPTY;\n    }\n\n    Parser& Parser::init(const std::string& _str) {\n        m_state.reset(new scanner::Scanner(_str, \"\"));\n        consume_token();\n        return *this; \n    }\n\n    Parser& Parser::init(file* _file) {\n        if(m_file)\n            m_file->mark_parsed();\n        \n        m_file = nullptr; \n        m_file = _file;\n\n        m_state.reset(new scanner::Scanner(_file->src_str(), \n            _file->filename_str()));\n        consume_token();\n        return *this; \n    }\n\n    void Parser::expect(Token _token) {\n        if(_token != curr_token()) {\n            report_error()\n        }\n        consume_token();\n    }\n\n    void Parser::consume_token() {\n        m_state.consume();\n    }\n}\n\n// parsing functions\nnamespace parser {\n\n    program* Parser::build_tree() {\n        parser_utils::list<ast::decl*> decls;\n        __attribute__((unused)) module_decl* module = parse_module();\n        __attribute__((unused)) import_set* imports = parse_imports();\n        getchar();\n        Token t = curr_token();\n        while(t != TKN_EOF) {\n            if(t == TKN_DIRECTIVE) {\n                std::string value(m_state.token().directive_lit());\n                if(value == \"stop\") {\n                    std::cout << \"Stop Directive: Stopped Parsing\" << std::endl;\n                    break;\n                }\n            }\n            decls.push_back(parse_decl());\n        }\n        return nullptr; \n    }\n\n    node* Parser::next(const state& _token) {\n        if(_token.m_token == TKN_IDENTIFIER)\n            return nullptr;\n        return nullptr;\n    }\n\n    import_set* Parser::parse_imports() {\n        Token t = curr_token();\n        import_set* set = new import_set;\n        while(t == TKN_IMPORT) {\n            consume_token();\n            auto id = parse_Id();\n            expect(TKN_SEM);\n            set->add_import(new import(id));\n            t = curr_token();\n        }\n        cout << \"Imports:\\n\";\n        for(auto i : *set)\n            cout << \"\\t\" << i->get_name() << endl;\n        return set;\n    }\n\n    module_decl* Parser::parse_module() {\n        auto t = curr_token();\n        ident* id;\n        if(t != TKN_MODULE) {\n            // TODO(Andrew): How to handle empty module stmt?\n            //               1: Make it global pkg (main)\n            //               2: Error?\n            std::cout << \"Is not a module\\n\";\n        }\n        else {\n            consume_token();\n            id = parse_Id();\n            expect(TKN_SEM);\n        }\n        cout << \"Module: \" << id->name_str() << endl;\n        return new module_decl(id);\n    }\n\n    ident* Parser::parse_Id() {\n        auto p = m_state.token().m_location;\n        atom* a = atom::Invalid_Atom;\n        if(curr_token() == TKN_IDENTIFIER) {\n            a = m_atom_table.insert(m_state.token().id_lit());\n        }\n        else {\n            expect(TKN_IDENTIFIER);\n        }\n        consume_token();\n        return new ident(a, p);\n    }\n\n    variable_decl* parse_Variable() {\n        return nullptr;\n    }\n\n    type* Parser::parse_tryType() {\n        return nullptr;\n    }\n\n    decl* Parser::parse_decl() {\n        std::cout << \"Parse Declerations\\n\";\n        // there must be an identifier first\n        m_tokenStack.push(parse_Id());\n        \n        switch(curr_token()) {\n            // if a double collon then it is either a function or a struct/\n            // class\n            // foo :: (x: f32) {}\n            // foo :: struct { x: f32; y: f32;}\n            // foo :: class { x: f32; y: int;}\n            case TKN_DCOL: {\n                switch(next_token()) {\n                    case TKN_STRUCT:\n                        std::cout << \"Parsing A struct\\n\";\n                        break;\n                    case TKN_CLASS:\n                        std::cout << \"Parsing A struct\\n\";\n                        break;\n                    case TKN_LBRACK:\n                        std::cout << \"Parsing A struct\\n\";\n                        break;\n                    default:\n                        std::cout << \"Error\\n\";   \n                }\n            } break;\n                \n            // if a Decl, :=, then it can be either a variable or a function\n            // x := 1;\n            // foo := (x: f32) {} this is a lambda\n            case TKN_DECL:{\n\n            } break;\n                \n            // it is a variable\n            // x: f32;\n            case TKN_COL:{\n\n            } break;\n        \n            // it is a multi-declared variable stmt\n            // x, y := 1, 2;\n            // x, y: f32;\n            case TKN_COM:{\n\n            } break;\n            default:\n                printf(\"Not a decl\\n\");\n           \n        }\n        consume_token();\n        return nullptr;\n    }\n\n    void Parser::report_error(node* _node, const char* _file, \n        const char* _str, ...) {\n        va_list vl;\n        format_error_str(_node->loc(), _file, _str, vl);\n        formatted_code(_node);\n    }\n\n    void Parser::format_error_str(const loc::Loc& _loc, \n        const char* _file, const char* _str, ...) {\n        printf(\"%s(%lu:%lu) Error: \", _file, _loc.line, _loc.column);\n        va_list vl;\n        printf(_str, vl);\n        printf(\"\\n\\n\");\n    }\n\n    void Parser::formatted_code(node* _node) {\n        printf(\"\\t\");\n        rho::source src = m_file->get_line(_node->loc().line);\n        printf(\"%s\\n\", src.m_source);\n    }\n}\n\n/*\n\npath.rho(line:column) Error: string\n    \n    line of code.\n\n*/",
			"file": "src/parser/parser.cpp",
			"file_size": 6009,
			"file_write_time": 131304013230000000,
			"settings":
			{
				"buffer_size": 6023,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"ast_utils.h\"\n#include <cstring>\n\nnamespace ast_utils {\n\tsize_t atom::next_id = -1;\n\tatom* atom::Invalid_Atom = new atom(\"_\");\n\tnode::node(const loc::Loc& _loc, ast::Ast_Type _type, node* _parent):\n\t\tm_parent(_parent), m_loc(_loc), m_type(_type) {}\n\n\tvoid node::set_parent(node* _p) {\n\t\tm_parent = _p;\n\t}\n\n\tvoid node::add_child(node* _c) {\n\t\tm_children.push_back(_c);\n\t}\n\n\tconst loc::Loc& node::loc() {\n\t\treturn m_loc;\n\t}\n\n\tast::Ast_Type node::type() {\n\t\treturn m_type;\n\t}\n\n\terror_node::error_node(const loc)\n\n\tid_string* new_id_string(const char* _str) {\n\t\tshort size = std::char_traits<char>::length(_str);\n\t\treturn new id_string{strdup(_str), size};\n\t}\n\t\n\tatom::atom(const char* _name) {\n\t\tm_name = new_id_string(_name);\n\t\tm_uid = next_id++;\n\t}\n\n\tconst char* atom::name() {\n\t\treturn m_name->m_string;\n\t}\n\n}",
			"file": "src/ast/ast_utils.cpp",
			"file_size": 782,
			"file_write_time": 131304013080000000,
			"settings":
			{
				"buffer_size": 818,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ast/ast_type.h",
			"settings":
			{
				"buffer_size": 2623,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ast/ast_utils.h",
			"settings":
			{
				"buffer_size": 2682,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "git",
		"selected_items":
		[
			[
				"git",
				"Git: Gui"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"new",
				"File: New View into File"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Remove Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"ins",
				"Package Control: Advanced Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			]
		],
		"width": 438.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": true,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/andrewbregger/Documents/Code/rho",
		"/Users/andrewbregger/Documents/Code/rho/src",
		"/Users/andrewbregger/Documents/Code/rho/src/ast",
		"/Users/andrewbregger/Documents/Code/rho/src/files",
		"/Users/andrewbregger/Documents/Code/rho/src/parser",
		"/Users/andrewbregger/Documents/Code/rho/src/util"
	],
	"file_history":
	[
		"/Users/andrewbregger/Documents/Code/rho/README.md",
		"/Users/andrewbregger/Documents/Code/rho/src/parser/parser.h",
		"/Users/andrewbregger/Documents/Code/rho/src/parser/parser.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/parser/parser_utils.h",
		"/Users/andrewbregger/Documents/Code/rho/src/scanner/constant.h",
		"/Users/andrewbregger/Documents/Code/rho/src/scanner/scanner.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/scanner/scanner.h",
		"/Users/andrewbregger/Documents/Code/rho/src/util/token_type.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_ident.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_utils.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_type.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_type.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/util/location.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/util/location.h",
		"/Users/andrewbregger/Documents/Code/rho/src/util/common.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/atom_table.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/atom_table.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_utils.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_ident.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/files/file.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/files/file.h",
		"/Users/andrewbregger/Documents/Code/rho/test.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_stmt.h",
		"/Users/andrewbregger/Documents/Code/rho/examples/t1.rho",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_decl.h",
		"/Users/andrewbregger/Documents/Code/rho/src/parser/compilation_unit.h",
		"/Users/andrewbregger/Documents/Code/rho/src/parser/parser_utils.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/util/common.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/scope.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/files/source_mgr.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/files/source_mgr.h",
		"/Users/andrewbregger/Documents/Code/rho/src/files/file_loc.h",
		"/Users/andrewbregger/Documents/Code/rho/src/files/file_loc.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_stmt.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_decl.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/scope.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_identifer.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_identifer.h",
		"/Users/andrewbregger/Documents/Code/rho/src/rho.h",
		"/Users/andrewbregger/Documents/Code/rho/src/rho.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_tree.h",
		"/Users/andrewbregger/Documents/Code/rho/src/util/config.h",
		"/Users/andrewbregger/Library/Application Support/Sublime Text 3/Packages/C++ Snippets/reference.md",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/scanner/.scanner.cpp.swp",
		"/Users/andrewbregger/Documents/Code/rho/src/error/error.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/error/error.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast.h",
		"/Users/andrewbregger/Documents/Code/rho/src/token_type.h",
		"/Users/andrewbregger/Documents/Code/rho/src/ast/ast_util.cpp",
		"/Users/andrewbregger/Documents/Code/rho/src/token_type.cpp",
		"/Users/andrewbregger/Documents/Code/rho/test.rho",
		"/Users/andrewbregger/Library/Application Support/Sublime Text 3/Packages/User/rho.sublime-syntax"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"../",
			".",
			"common.h",
			"ast_utils.h",
			"/Users/andrewbregger/Documents/Code/rho/src"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"i32",
			"u64",
			"Ast_Id",
			"file",
			"Identifier",
			"        \n",
			");\n",
			"    \t\n",
			";\n",
			"Decl",
			"_Decl",
			"Decl",
			";\n",
			");\n",
			"_file",
			"\t\t\n",
			";\n",
			"bool",
			"i32",
			"AST_NODE_TYPE",
			"Node",
			"int",
			"size_t",
			"()\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"int",
			"size_t",
			"ident",
			"decl",
			"_decl",
			"decl",
			"int",
			"Ast_Type",
			"node",
			"i32",
			"u64"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/andrewbregger/Documents/Code/rho"
		}
	],
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/parser/parser.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6023,
						"regions":
						{
						},
						"selection":
						[
							[
								5093,
								5093
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2989.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/ast/ast_utils.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 818,
						"regions":
						{
						},
						"selection":
						[
							[
								516,
								516
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "src/ast/ast_type.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2623,
						"regions":
						{
						},
						"selection":
						[
							[
								498,
								498
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 95.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/ast/ast_utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2682,
						"regions":
						{
						},
						"selection":
						[
							[
								747,
								747
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 27.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 27.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sat_ut",
				"src/ast/ast_utils.cpp"
			],
			[
				"",
				"README.md"
			],
			[
				"ast_ut",
				"src/ast/ast_utils.h"
			],
			[
				"par",
				"src/parser/parser.cpp"
			],
			[
				"loc",
				"src/util/location.h"
			],
			[
				"com",
				"src/util/common.h"
			],
			[
				"ast_",
				"src/ast/ast_utils.h"
			],
			[
				"ast",
				"src/ast/ast_ident.cpp"
			],
			[
				"t1",
				"examples/t1.rho"
			],
			[
				"test",
				"test.cpp"
			],
			[
				"file",
				"src/files/file.cpp"
			],
			[
				"ast_yt",
				"src/ast/ast_type.cpp"
			],
			[
				"atom",
				"src/ast/atom_table.h"
			],
			[
				"te",
				"test.cpp"
			],
			[
				"sc",
				"src/scanner/scanner.cpp"
			],
			[
				"sca",
				"src/scanner/scanner.h"
			],
			[
				"con",
				"src/scanner/constant.h"
			],
			[
				"loca",
				"src/util/location.h"
			],
			[
				"pa",
				"src/parser/parser.cpp"
			],
			[
				"sou",
				"src/files/source_mgr.cpp"
			],
			[
				"sour",
				"src/files/source_mgr.h"
			],
			[
				"file.c",
				"src/files/file.cpp"
			],
			[
				"atopm",
				"src/ast/atom_table.cpp"
			],
			[
				"ast_u",
				"src/ast/ast_utils.h"
			],
			[
				"a/",
				"src/ast/ast_type.h"
			],
			[
				"ast_t",
				"src/ast/ast_type.h"
			],
			[
				"lo",
				"src/util/location.h"
			],
			[
				"pas",
				"src/parser/parser.h"
			],
			[
				"ast_de",
				"src/ast/ast_decl.h"
			],
			[
				"astd",
				"src/ast/ast_decl.h"
			],
			[
				"id",
				"src/ast/ast_identifer.h"
			],
			[
				"c",
				"src/util/common.cpp"
			],
			[
				"s",
				"src/scanner/scanner.cpp"
			],
			[
				"scan",
				"src/scanner/scanner.h"
			],
			[
				"sacn",
				"src/scanner/scanner.cpp"
			],
			[
				"fil",
				"src/files/file.h"
			],
			[
				"so",
				"src/files/source_mgr.h"
			],
			[
				"pr",
				"src/parser/parser_utils.h"
			],
			[
				"tokn",
				"src/token_type.h"
			],
			[
				"tok",
				"src/token_type.h"
			],
			[
				"t",
				"examples/t1.rho"
			],
			[
				"type",
				"src/token_type.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 161.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
