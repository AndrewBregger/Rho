#ifndef TOKEN_H_
#define TOKEN_H_

namespace token {
  enum Token_Type {
    TKN_COMMENT,
    TKN_WHITESPACE,
    TKN_ERROR,
    TKN_EOF,
    TKN_EMPTY,

    begin_literal,
    TKN_LSTRING,
    TKN_IDENTIFIER,
    TKN_KEYWORD,
    TKN_LCHAR,
    TKN_Li32,
    TKN_LDOUBLE,
    TKN_LBOOL,
    end_literal,

    begin_operator,

    TKN_ADD,
    TKN_SUB,
    TKN_MULT,
    TKN_DIV,
    TKN_REM,
    TKN_POW,

    TKN_AT,
    TKN_AND,
    TKN_OR,
    TKN_XOR,
    TKN_NOT,
    TKN_SHTL,
    TKN_SHTR,

    TKN_ADDASN,
    TKN_SUBASN,
    TKN_MULTASN,
    TKN_DIVASN,
    TKN_REMASN,
    TKN_XORASN,


    TKN_ANDASN,
    TKN_ORASN,

    TKN_SHTLASN,
    TKN_SHTRASN,

    TKN_LITAND,
    TKN_LITOR,

    TKN_RARR,
    TKN_LARR,

    TKN_INC,
    TKN_DEC,
    TKN_ASN,
    TKN_DECL,

    TKN_LESS,
    TKN_GRET,
    TKN_LEQ,
    TKN_GEQ,

    TKN_EQ,
    TKN_NEQ,
    TKN_ELS,

    TKN_LBRACK,
    TKN_RBRACK,
    TKN_LBRACE,
    TKN_RBRACE,
    TKN_LPAREN,
    TKN_RPAREN,

    TKN_PER,
    TKN_SEM,
    TKN_COM,
    TKN_COL,
    TKN_DCOL,

    TKN_DIRECTIVE,
    TKN_QEST,
    TKN_DOLLAR,

    end_operator,

    begin_keyword,
    TKN_CONST,
    TKN_IF,
    TKN_FOR,
    TKN_ELSE,
    TKN_ELIF,
    TKN_LOOP,
    TKN_CLASS,
    TKN_STRUCT,
    TKN_IMPORT,
    TKN_MODULE,
    TKN_USING,
    TKN_NAMESPACE,
    TKN_RETURN,
    TKN_SWTICH,
    TKN_DEFER,
    TKN_WORKSPACE,
    TKN_NEW,
    TKN_UNION,
    TKN_ENUM,
    TKN_i32,
    TKN_i328,
    TKN_i3216,
    TKN_i3232,
    TKN_i3264,
    TKN_Ui32,
    TKN_Ui328,
    TKN_Ui3216,
    TKN_Ui3232,
    TKN_Ui3264,
    TKN_FLOAT,
    TKN_FLOAT32,
    TKN_FLOAT64,
    TKN_UFLOAT,
    TKN_UFLOAT32,
    TKN_UFLOAT64,
    TKN_STRING,
    TKN_RSTRING,
    TKN_WSTRING,
    TKN_CHAR,
    TKN_WCHAR,
    TKN_TRUE,
    TKN_FALSE,
    TKN_BOOL,
    TKN_NIL,
    TKN_BYTE,
    TKN_ASM,

    end_keyword
  };

  const std::map<std::string, Token> tokens = {
    {"+",                                TKN_ADD       } ,
    {"-",                                TKN_SUB       } ,
    {"*",                                TKN_MULT      } ,
    {"/",                                TKN_DIV       } ,
    {"%",                                TKN_REM       } ,
    {"**",                               TKN_POW       } ,
    {"@",                                TKN_AT        } ,
    {"&",                                TKN_AND       } ,
    {"|",                                TKN_OR        } ,
    {"^",                                TKN_XOR       } ,
    {"!",                                TKN_NOT       } ,
    {"<<",                               TKN_SHTL      } ,
    {">>",                               TKN_SHTR      } ,
    {"+=",                               TKN_ADDASN    } ,
    {"-=",                               TKN_SUBASN    } ,
    {"*=",                               TKN_MULTASN   } ,
    {"/=",                               TKN_DIVASN    } ,
    {"%=",                               TKN_REMASN    } ,
    {"&=",                               TKN_ANDASN    } ,
    {"|=",                               TKN_ORASN     } ,
    {"^=",                               TKN_XORASN    } ,
    {"<<=",                              TKN_SHTLASN   } ,
    {">>=",                              TKN_SHTRASN   } ,
    {"&&",                               TKN_LITAND    } ,
    {"||",                               TKN_LITOR     } ,
    {"->",                               TKN_RARR      } ,
    {"<-",                               TKN_LARR      } ,
    {"++",                               TKN_INC       } ,
    {"--",                               TKN_DEC       } ,
    {"=",                                TKN_ASN       } ,
    {":=",                               TKN_DECL      } ,
    {"<",                                TKN_LESS      } ,
    {">",                                TKN_GRET      } ,
    {"<=",                               TKN_LEQ       } ,
    {">=",                               TKN_GEQ       } ,
    {"==",                               TKN_EQ        } ,
    {"!=",                               TKN_NEQ       } ,
    {"...",                              TKN_ELS       } ,
    {"{",                                TKN_LBRACK    } ,
    {"}",                                TKN_RBRACK    } ,
    {"[",                                TKN_LBRACE    } ,
    {"]",                                TKN_RBRACE    } ,
    {"(",                                TKN_LPAREN    } ,
    {")",                                TKN_RPAREN    } ,
    {".",                                TKN_PER       } ,
    {";",                                TKN_SEM       } ,
    {",",                                TKN_COM       } ,
    {":",                                TKN_COL       } ,
    {"::",                               TKN_DCOL      } ,
    {"#",                                TKN_DIRECTIVE     } ,
    {"$",                                TKN_DOLLAR    } ,
    {"?",                                TKN_QEST      } ,
    {"if",                               TKN_IF        } ,
    {"for",                              TKN_FOR       } ,
    {"else",                             TKN_ELSE      } ,
    {"else if",                          TKN_ELIF      } ,
    {"loop",                             TKN_LOOP      } ,
    {"class",                            TKN_CLASS     } ,
    {"struct",                           TKN_STRUCT    } ,
    {"import",                           TKN_IMPORT    } ,
    {"module",                           TKN_MODULE    } ,
    {"using",                            TKN_USING     } ,
    {"namespace",                        TKN_NAMESPACE } ,
    {"return",                           TKN_RETURN    } ,
    {"switch",                           TKN_SWTICH    } ,
    {"defer",                            TKN_DEFER     } ,
    {"workspace",                        TKN_WORKSPACE } ,
    {"new",                              TKN_NEW       } ,
    {"union",                            TKN_UNION     } ,
    {"enum",                             TKN_ENUM      } ,
    {"int",                              TKN_i32       } ,
    {"i8",                             TKN_i328      } ,
    {"i16",                            TKN_i3216     } ,
    {"int",                            TKN_i3232     } ,
    {"i64",                            TKN_i3264     } ,
    {"ui32",                             TKN_Ui32      } ,
    {"u8",                               TKN_Ui328     } ,
    {"u16",                              TKN_Ui3216    } ,
    {"u32",                              TKN_Ui3232    } ,
    {"size_t",                              TKN_Ui3264    } ,
    {"float",                            TKN_FLOAT     } ,
    {"f32",                              TKN_FLOAT32   } ,
    {"f64",                              TKN_FLOAT64   } ,
    {"ufloat",                           TKN_UFLOAT    } ,
    {"uf32",                             TKN_UFLOAT32  } ,
    {"uf64",                             TKN_UFLOAT64  } ,
    {"string",                           TKN_STRING    } ,
    {"rstring",                          TKN_RSTRING   } ,
    {"wstring",                          TKN_WSTRING   } ,
    {"char",                             TKN_CHAR      } ,
    {"wchar",                            TKN_WCHAR     } ,
    {"true",                             TKN_TRUE      } ,
    {"false",                            TKN_FALSE     } ,
    {"bool",                             TKN_BOOL      } ,
    {"nil",                              TKN_NIL       } ,
    {"byte",                             TKN_BYTE      } ,
    {"asm",                              TKN_ASM       }
  };

  class Token {

  };
}

#endif