 ///////////////////////////////////////////////////////////////////////////////
///
/// This is was originally structured using c++ inheritance but it was becoming
/// combersome. I decided to change it to union of structures.
///
///////////////////////////////////////////////////////////////////////////////
#ifndef RHO_AST_H_
#define RHO_AST_H_

// #include <vector>
// #include "ast/Atom.h"
// #include "token/Token.h"
// #include "utils/String.h"

using namespace token;

// joins f+b
#define JOIN(f, b) f##b

struct AstNode;
// typedef std::vector<AstNode*> AstNodeList;
template<typename T>
 using Array = std::vector<T>;


#define AddNode(list, node) list.push_back(node);

// Ast_Node_Kind(node_kind, name, ...)
 
#define Ast_Node_Kinds \
	Ast_Node_Kind(Ident, "identifier", struct { \
		ast::Atom* atom; \
	}) \
	Ast_Node_Kind(Keyword, "keyword", Token) \
	Ast_Node_Kind(Literal, "literal", Token) \
	Ast_Node_Kind(Directive, "directive", struct { \
		Token token; \
		std::string name; \
	}) \
	Ast_Node_Kind(CompoundLiteral, "compound literal", struct { \
		AstNode* type; \
		AstNodeList literals; \
		Token begin, end; \
	}) \
Ast_Node_Kind(_BeginExpr, "", int) \
	Ast_Node_Kind(BadExpr, "bad expression", struct { \
		Token begin, end; \
	}) \
	Ast_Node_Kind(FuncCall, "function call", struct { \
		AstNode* name; \
		AstNodeList actuals; \
		Token begin, end; \
	}) \
	Ast_Node_Kind(MethodCall, "method call", struct { \
		AstNode* type,* name; \
		AstNodeList actuals; \
		Token begin, end; \
	}) \
	Ast_Node_Kind(UnaryExpr, "unary expression", struct { \
		Token op; \
		AstNode* expr; \
	}) \
	Ast_Node_Kind(BinaryExpr, "binary expression", struct { \
		Token op; \
		AstNode* left,* right; \
	}) \
	Ast_Node_Kind(ParenExpr, "parenthesis expression", struct { \
		AstNode* expr; \
		Token begin, end; \
	}) \
	Ast_Node_Kind(IncDecExpr, "increment decrement expression", struct { \
		Token op; \
		AstNode* expr; \
	}) \
Ast_Node_Kind(_EndExpr, "", int) \
Ast_Node_Kind(_BeginStmt, "", int) \
	Ast_Node_Kind(BadStmt, "bad statement", int) \
	Ast_Node_Kind(EmptyStmt, "empty statement", Token) \
	Ast_Node_Kind(ExprStmt, "expression statement", struct { AstNode* expr; }) \
	Ast_Node_Kind(AssignStmt, "assignment statement", struct { Token op; AstNodeList left; AstNodeList right; }) \
	Ast_Node_Kind(_BeginComplexStmt, "", int) \
		Ast_Node_Kind(BlockStmt, "block statement", struct { AstNodeList stmts; Token begin, end; }) \
	Ast_Node_Kind(IfStmt, "if statement", struct { \
		Token token; \
		AstNode* cond; \
		AstNode* body; \
		AstNode* if_else_stmt; \
	})\
	Ast_Node_Kind(ForStmt, "for statement", struct { \
		Token token; \
		AstNode* init; \
		AstNode* cond; \
		AstNode* post; \
		AstNode* body; \
	}) \
	Ast_Node_Kind(ReturnStmt, "return statement", struct { Token token; AstNodeList results; }) \
	Ast_Node_Kind(DeferStmt, "defer statement", struct { Token token; AstNode* label; }) \
	Ast_Node_Kind(_EndComplexStmt, "", int) \
Ast_Node_Kind(_EndStmt, "", int) \
Ast_Node_Kind(_BeginDecl, "", int) \
	Ast_Node_Kind(BadDecl, "bad declaraction", struct{ \
		Token token; \
	}) \
	Ast_Node_Kind(VariableSpec, "variable specification", struct { \
		AstNodeList names; \
		AstNode* type; \
		AstNodeList values; \
	}) \
	Ast_Node_Kind(TypeSpec, "type specification", struct { \
		Token token; \
		AstNode* type; \
	}) \
	Ast_Node_Kind(FunctDecl, "function declaration", struct { \
		Token token; \
		AstNode* name; \
		AstNode* type; \
		AstNode* body; \
		AstNodeList params; \
	}) \
	Ast_Node_Kind(MethodDecl, "method declaration", struct { \
		Token token; \
		AstNode* name; \
		AstNode* type; \
		AstNodeList actuals; \
	}) \
	Ast_Node_Kind(ImportDecl, "import specification", struct { \
		Token relPath; \
		std::string absPath; \
		Token name; \
	}) \
Ast_Node_Kind(_EndDecl, "", int) \
Ast_Node_Kind(_BeginType, "", int) \
	Ast_Node_Kind(HelperType, "helper type", struct { Token token; AstNode* type; }) \
	Ast_Node_Kind(PointerType, "pointer type", struct { Token token; AstNode* type; }) \
	Ast_Node_Kind(ArrayType, "array type", struct { Token token; AstNode* count; AstNode* type; } \
	Ast_Node_Kind(DynamicArrayType, "dynamic array type", struct { Token token; AstNode* type; }) \
	Ast_Node_Kind(UnionType, "union specification", struct { Token token;	AstNode* name;	AstNodeList members;}) \
	Ast_Node_Kind(ClassType, "class specification", struct { Token token;	AstNode* name;	AstNodeList members;	AstNodeList methods;}) \
	Ast_Node_Kind(StructType, "struct specification", struct { Token token;	AstNode* name;	AstNodeList members;}) \
	Ast_Node_Kind(EnumType, "enum type", struct { Token token;	AstNodeList values;}) \
Ast_Node_Kind(_EndType, "", int)

enum AstNodeKind {
#define Ast_Node_Kind(_kind_name_, ...) Ast_##_kind_name_,
	Ast_Node_Kinds
#undef Ast_Node_Kind
	Ast_Invalid,
	Ast_NumNodes
};

// define strings
extern std::string ast_strings[Ast_NumNodes];

// #define Ast_Node_Kind(_kind, name, ...) typedef __VA_ARGS__ Ast##_kind; 
// Ast_Node_Kinds
// #undef Ast_Node_Kind

struct AstNode {
	AstNodeKind kind;
// #define Ast_Node_Kind(_kind, ...) Ast##_kind _kind;
// 	Ast_Node_Kinds
// #undef Ast_Node_Kind 
};



#endif