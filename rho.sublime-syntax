%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Rho
file_extensions:
  - rho
scope: source.rho
variables:
  operators: '\boperator\s*(?:[-+*/%Ë†&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\|\||\+\+|--|,|->\*?|\(\)|\[\])'
  identifiers: '\b[[:alpha:]_][[:alnum:]_]*\b'
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment
      push: line_comment
    - match: '/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/'
      scope: punctuation.definition.comment


    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while|loop|import|struct|class|new|delete|defer|namespace|defer|workspace|asm|using|match|return|nil|enum|union|true|false)\b'
      scope: keyword.control

    - match: ^\s*(#load)\b
      scope: keyword.control.import

    - match: ^\s*(#construct)\b
      scope: keyword.

    - match: '\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|uf32|uf64|bool|string|byte|char)\b'
      scope: keyword.types
    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric

    - match: '\b[[:alpha:]_][[:alnum:]_]*\b'
      scope: variable.parameter

    - match: 'main'
      scope: main.packageorfunction

    - match: \s*(:=|::|:|*|->|==|)\s*
      scope: punctuation.

    # - match: \s*(:=|=|::|==|<=|>=|+|-|*|**|/|+=|-=|*=|**=|/=|<<|>>|<<=|>>=|++|--| &=| ^= | ~=| ^|&|<|>)\b
      # scope: operaotr

    - match: ''
      scope: identifiers.values

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '"'
      scope: punctuation.definition.string.end
      pop: true


  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
