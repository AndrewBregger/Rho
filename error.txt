Compiling main.cpp
In file included from ./src/parser/Parser.h:13:0,
                 from main.cpp:10:
./src/ast/Ast.h:69:18: error: backslash and newline separated by space [-Werror]
   AstNode* expr; \
                   
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 4 arguments, but takes just 3
 AstNodeKinds
 ^~~~~~~~~~~~ 
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 4 arguments, but takes just 3
 AstNodeKinds
 ^~~~~~~~~~~~  
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 4 arguments, but takes just 3
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 5 arguments, but takes just 3
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 4 arguments, but takes just 3
 AstNodeKinds
 ^~~~~~~~~~~~ 
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 4 arguments, but takes just 3
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" requires 3 arguments, but only 2 given
 AstNodeKinds
 ^~~~~~~~~~~
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 4 arguments, but takes just 3
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:177:1: error: macro "AstNodeKind" passed 4 arguments, but takes just 3
 AstNodeKinds
 ^~~~~~~~~~~~         
./src/ast/Ast.h:107:13: error: expected constructor, destructor, or type conversion before ‘(’ token
  AstNodeKind(_EndComplexStmt, "", int) \
             ^
./src/ast/Ast.h:112:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:117:3: error: expected unqualified-id before ‘)’ token
  })
   ^
./src/ast/Ast.h:121:3: error: expected unqualified-id before ‘)’ token
  })
   ^
./src/ast/Ast.h:128:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:134:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:139:3: error: expected unqualified-id before ‘)’ token
  })
   ^
./src/ast/Ast.h:145:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:149:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:155:13: error: expected constructor, destructor, or type conversion before ‘(’ token
  AstNodeKind(DynamicArrayType, "dynamic array type", struct { \
             ^
./src/ast/Ast.h:158:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:160:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:162:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:164:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:166:3: error: expected unqualified-id before ‘)’ token
  }) \
   ^
./src/ast/Ast.h:176:40: error: ‘Ast_Ident’ does not name a type; did you mean ‘AstNode’?
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:27:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Ident, "identifier", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:27:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Ident, "identifier", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast_Keyword’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:30:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Keyword, "keyword", Token) \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast_Literal’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:31:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Literal, "literal", Token) \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast_Directive’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:32:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Directive, "directive", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:32:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Directive, "directive", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:36:2: error: ‘AstNodeKind’ does not name a type; did you mean ‘AstNodeKinds’?
  AstNodeKind(CompoundLiteral, "compound literal", struct { \
  ^
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:42:2: error: ‘AstNodeKind’ does not name a type; did you mean ‘AstNodeKinds’?
  AstNodeKind(BadExpr, "bad expression", struct { \
  ^
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:55:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(UnaryExpr, "unary expression", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:59:2: error: ‘AstNodeKind’ does not name a type; did you mean ‘AstNodeKinds’?
  AstNodeKind(BinaryExpr, "binary expression", struct { \
  ^
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:67:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(IncDecExpr, "increment decrement expression", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast__EndExpr’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:71:1: note: in expansion of macro ‘AstNodeKind’
 AstNodeKind(_EndExpr, "", int) \
 ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast__BeginStmt’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:72:1: note: in expansion of macro ‘AstNodeKind’
 AstNodeKind(_BeginStmt, "", int) \
 ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast_BadStmt’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:73:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(BadStmt, "bad statement", int) \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:74:2: error: ‘AstNodeKind’ does not name a type; did you mean ‘AstNodeKinds’?
  AstNodeKind(EmptyStmt "empty statement", Token) \
  ^
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:75:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ExprStmt, "expression statement", struct { AstNode* expr; }) \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:76:2: error: ‘AstNodeKind’ does not name a type; did you mean ‘AstNodeKinds’?
  AstNodeKind(AssignStmt, "assignment statement", struct { \
  ^
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:81:3: error: ‘AstNodeKind’ does not name a type; did you mean ‘AstNodeKinds’?
   AstNodeKind(BlockStmt, "block statement", struct { \
   ^
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:85:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(IfStmt, "if statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast_ForStmt’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:91:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ForStmt, "for statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:91:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ForStmt, "for statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast_ReturnStmt’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:98:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ReturnStmt, "return statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:98:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ReturnStmt, "return statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:40: error: ‘Ast_DeferStmt’ does not name a type
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                        ^
./src/ast/Ast.h:102:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(DeferStmt, "defer statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:176:56: error: extra ‘;’ [-Werror=pedantic]
 #define AstNodeKind(_kind, name, type) Ast_##_kind type;
                                                        ^
./src/ast/Ast.h:102:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(DeferStmt, "defer statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:177:1: note: in expansion of macro ‘AstNodeKinds’
 AstNodeKinds
 ^~~~~~~~~~~~
./src/ast/Ast.h:183:2: error: ‘AstNodeType’ does not name a type; did you mean ‘AstNode’?
  AstNodeType kind;
  ^~~~~~~~~~~
  AstNode
./src/ast/Ast.h:184:34: error: ‘Ast_Ident’ does not name a type; did you mean ‘AstNode’?
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:27:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Ident, "identifier", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_Keyword’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:30:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Keyword, "keyword", Token) \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_Literal’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:31:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Literal, "literal", Token) \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_Directive’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:32:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(Directive, "directive", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_CompoundLiteral’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:36:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(CompoundLiteral, "compound literal", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast__BeginExpr’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:41:1: note: in expansion of macro ‘AstNodeKind’
 AstNodeKind(_BeginExpr, "", int) \
 ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_BadExpr’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:42:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(BadExpr, "bad expression", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_FnCall’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:45:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(FnCall, "function call", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_MethodCall’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:50:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(MethodCall, "method call", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_UnaryExpr’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:55:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(UnaryExpr, "unary expression", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_BinaryExpr’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:59:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(BinaryExpr, "binary expression", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_ParenExpr’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:63:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ParenExpr, "parenthesis expression", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_IncDecExpr’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:67:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(IncDecExpr, "increment decrement expression", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast__EndExpr’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:71:1: note: in expansion of macro ‘AstNodeKind’
 AstNodeKind(_EndExpr, "", int) \
 ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast__BeginStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:72:1: note: in expansion of macro ‘AstNodeKind’
 AstNodeKind(_BeginStmt, "", int) \
 ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_BadStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:73:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(BadStmt, "bad statement", int) \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_EmptyStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:74:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(EmptyStmt "empty statement", Token) \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_ExprStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:75:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ExprStmt, "expression statement", struct { AstNode* expr; }) \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_AssignStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:76:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(AssignStmt, "assignment statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast__BeginComplexStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:80:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(_BeginComplexStmt, "", int) \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_BlockStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:81:3: note: in expansion of macro ‘AstNodeKind’
   AstNodeKind(BlockStmt, "block statement", struct { \
   ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_IfStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:85:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(IfStmt, "if statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_ForStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:91:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ForStmt, "for statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_ReturnStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:98:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(ReturnStmt, "return statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
./src/ast/Ast.h:184:34: error: ‘Ast_DeferStmt’ does not name a type
  #define AstNodeKind(_kind, ...) Ast_##_kind _kind;
                                  ^
./src/ast/Ast.h:102:2: note: in expansion of macro ‘AstNodeKind’
  AstNodeKind(DeferStmt, "defer statement", struct { \
  ^~~~~~~~~~~
./src/ast/Ast.h:185:2: note: in expansion of macro ‘AstNodeKinds’
  AstNodeKinds
  ^~~~~~~~~~~~
cc1plus: all warnings being treated as errors
make: *** [Makefile:20: main.o] Error 1
